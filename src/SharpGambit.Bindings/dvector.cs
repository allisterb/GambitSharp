// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace gambit
{
    namespace Gambit
    {
        namespace DVector
        {
            [StructLayout(LayoutKind.Sequential, Size = 112)]
            public unsafe partial struct __Internal
            {
                internal __IntPtr vfptr_Array;
                internal int mindex;
                internal int maxdex;
                internal __IntPtr data;
                internal __IntPtr svptr;
                internal global::gambit.Gambit.Array.__Internal svlen;
                internal __IntPtr dvptr;
                internal global::gambit.Gambit.Array.__Internal dvlen;
                internal global::gambit.Gambit.Array.__Internal dvidx;
            }
        }

        public unsafe partial class DVector<T> : global::gambit.Gambit.PVector<T>, IDisposable
        {
            internal static new DVector<T> __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new DVector<T>(native.ToPointer(), skipVTables);
            }

            internal static new DVector<T> __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (DVector<T>)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static DVector<T> __CreateInstance(global::gambit.Gambit.DVector.__Internal native, bool skipVTables = false)
            {
                return new DVector<T>(native, skipVTables);
            }

            private static void* __CopyValue(global::gambit.Gambit.DVector.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::gambit.Gambit.DVector.__Internal));
                *(global::gambit.Gambit.DVector.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private DVector(global::gambit.Gambit.DVector.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected DVector(void* native, bool skipVTables = false)
                : base((void*) native)
            {
            }

            public DVector(global::gambit.Gambit.PVector<int> sig)
                : this((void*) null)
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.Rational)))
                {
                    throw new MissingMethodException("Method DVector_T_ ignored in specialization global::gambit.Gambit.DVector<global::gambit.Gambit.Rational>.");
                }
                if (__T.IsAssignableFrom(typeof(double)))
                {
                    throw new MissingMethodException("Method DVector_T_ ignored in specialization global::gambit.Gambit.DVector<double>.");
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.DVector<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.Rational>, <double>.");
            }

            public DVector(global::gambit.Gambit.DVector<T> v)
                : this((void*) null)
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.Rational)))
                {
                    throw new MissingMethodException("Method DVector_T_ ignored in specialization global::gambit.Gambit.DVector<global::gambit.Gambit.Rational>.");
                }
                if (__T.IsAssignableFrom(typeof(double)))
                {
                    throw new MissingMethodException("Method DVector_T_ ignored in specialization global::gambit.Gambit.DVector<double>.");
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.DVector<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.Rational>, <double>.");
            }

            partial void DisposePartial(bool disposing);

            internal protected override void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static explicit operator global::gambit.Gambit.DVector<T>(global::gambit.Gambit.PVector<int> sig)
            {
                return new global::gambit.Gambit.DVector<T>(sig);
            }

            protected T Dvptr
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.Rational)))
                    {
                        var __result0 = global::gambit.Gambit.Rational.__GetOrCreateInstance(((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvptr, false);
                        return (T) (object) (T) (object) __result0;
                    }
                    if (__T.IsAssignableFrom(typeof(double)))
                    {
                        return (T) (object) ((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvptr;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.DVector<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.Rational>, <double>.");
                }

                set
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.Rational)))
                    {
                        var __value = ((global::gambit.Gambit.Rational) (object) value) is null ? __IntPtr.Zero : ((global::gambit.Gambit.Rational) (object) value).__Instance;
                        ((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvptr = new __IntPtr(&__value);
                        return;
                    }
                    if (__T.IsAssignableFrom(typeof(double)))
                    {
                        var __value0 = (double) (object) value;
                        ((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvptr = (__IntPtr) (object) __value0;
                        return;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.DVector<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.Rational>, <double>.");
                }
            }

            protected global::gambit.Gambit.Array<int> Dvlen
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.Rational)))
                    {
                        return global::gambit.Gambit.Array<int>.__CreateInstance(new __IntPtr(&((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvlen));
                    }
                    if (__T.IsAssignableFrom(typeof(double)))
                    {
                        return global::gambit.Gambit.Array<int>.__CreateInstance(new __IntPtr(&((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvlen));
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.DVector<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.Rational>, <double>.");
                }

                set
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.Rational)))
                    {
                        if (ReferenceEquals(value, null))
                            throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                        ((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvlen = *(global::gambit.Gambit.Array.__Internal*) value.__Instance;
                        return;
                    }
                    if (__T.IsAssignableFrom(typeof(double)))
                    {
                        if (ReferenceEquals(value, null))
                            throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                        ((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvlen = *(global::gambit.Gambit.Array.__Internal*) value.__Instance;
                        return;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.DVector<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.Rational>, <double>.");
                }
            }

            protected global::gambit.Gambit.Array<int> Dvidx
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.Rational)))
                    {
                        return global::gambit.Gambit.Array<int>.__CreateInstance(new __IntPtr(&((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvidx));
                    }
                    if (__T.IsAssignableFrom(typeof(double)))
                    {
                        return global::gambit.Gambit.Array<int>.__CreateInstance(new __IntPtr(&((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvidx));
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.DVector<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.Rational>, <double>.");
                }

                set
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.Rational)))
                    {
                        if (ReferenceEquals(value, null))
                            throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                        ((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvidx = *(global::gambit.Gambit.Array.__Internal*) value.__Instance;
                        return;
                    }
                    if (__T.IsAssignableFrom(typeof(double)))
                    {
                        if (ReferenceEquals(value, null))
                            throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                        ((global::gambit.Gambit.DVector.__Internal*)__Instance)->dvidx = *(global::gambit.Gambit.Array.__Internal*) value.__Instance;
                        return;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.DVector<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.Rational>, <double>.");
                }
            }
        }
    }
}
