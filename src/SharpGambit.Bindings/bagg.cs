// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace gambit
{
    namespace Gambit
    {
        public unsafe partial class BAGGPureStrategyProfileRep
        {
            public partial struct __Internal
            {
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.BAGGPureStrategyProfileRep> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.BAGGPureStrategyProfileRep>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::gambit.Gambit.BAGGPureStrategyProfileRep managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::gambit.Gambit.BAGGPureStrategyProfileRep managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static BAGGPureStrategyProfileRep __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new BAGGPureStrategyProfileRep(native.ToPointer(), skipVTables);
            }

            internal static BAGGPureStrategyProfileRep __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (BAGGPureStrategyProfileRep)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static BAGGPureStrategyProfileRep __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new BAGGPureStrategyProfileRep(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private BAGGPureStrategyProfileRep(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected BAGGPureStrategyProfileRep(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }
        }

        namespace Agg
        {
            public unsafe partial class BAGG : IDisposable
            {
                [StructLayout(LayoutKind.Sequential, Size = 176)]
                public partial struct __Internal
                {
                    internal int numPlayers;
                    internal int numActionNodes;
                    internal global::Std.Vector.__Internalc__N_std_S_vector__I___N_std_S_allocator__I numTypes;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector__d___N_std_S_allocator__d___N_std_S_allocator__S0_ indepTypeDist;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector____N_std_S_vector__I___N_std_S_allocator__I___N_std_S_allocator__S1____N_std_S_allocator__S0_ typeActionSets;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector____N_std_S_vector__I___N_std_S_allocator__I___N_std_S_allocator__S1____N_std_S_allocator__S0_ typeAction2ActionIndex;
                    internal global::Std.Vector.__Internalc__N_std_S_vector__I___N_std_S_allocator__I typeOffset;
                    internal global::Std.Vector.__Internalc__N_std_S_vector__I___N_std_S_allocator__I strategyOffset;
                    internal global::Std.SharedPtr.__Internal aggPtr;
                    internal byte symmetric;

                    [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "??1BAGG@agg@Gambit@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
                    internal static extern void dtor(__IntPtr __instance);
                }

                public __IntPtr __Instance { get; protected set; }

                internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.Agg.BAGG> NativeToManagedMap =
                    new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.Agg.BAGG>();

                internal static void __RecordNativeToManagedMapping(IntPtr native, global::gambit.Gambit.Agg.BAGG managed)
                {
                    NativeToManagedMap[native] = managed;
                }

                internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::gambit.Gambit.Agg.BAGG managed)
                {
    
                    return NativeToManagedMap.TryGetValue(native, out managed);
                }

                protected bool __ownsNativeInstance;

                internal static BAGG __CreateInstance(__IntPtr native, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    return new BAGG(native.ToPointer(), skipVTables);
                }

                internal static BAGG __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    if (__TryGetNativeToManagedMapping(native, out var managed))
                        return (BAGG)managed;
                    var result = __CreateInstance(native, skipVTables);
                    if (saveInstance)
                        __RecordNativeToManagedMapping(native, result);
                    return result;
                }

                internal static BAGG __CreateInstance(__Internal native, bool skipVTables = false)
                {
                    return new BAGG(native, skipVTables);
                }

                private static void* __CopyValue(__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                    *(__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private BAGG(__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    __RecordNativeToManagedMapping(__Instance, this);
                }

                protected BAGG(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new __IntPtr(native);
                }

                public void Dispose()
                {
                    Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
                }

                partial void DisposePartial(bool disposing);

                internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    NativeToManagedMap.TryRemove(__Instance, out _);
                    DisposePartial(disposing);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }
            }
        }
    }
}
