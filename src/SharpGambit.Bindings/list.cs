// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace gambit
{
    namespace Gambit
    {
        namespace List
        {
            [StructLayout(LayoutKind.Sequential, Size = 48)]
            public unsafe partial struct __Internal
            {
                internal __IntPtr vfptr_List;
                internal int m_length;
                internal __IntPtr m_head;
                internal __IntPtr m_tail;
                internal int m_currentIndex;
                internal __IntPtr m_currentNode;
            }
        }

        /// <summary>A doubly-linked list container.</summary>
        /// <remarks>
        /// <para>This implements a doubly-linked list.  A special feature of this</para>
        /// <para>class is that it caches the last item accessed by indexing via</para>
        /// <para>operator[], meaning that, if accesses are done in sequential order,</para>
        /// <para>indexing time is constant.</para>
        /// <para>This index-cacheing feature was implemented very early in the development</para>
        /// <para>of Gambit, before STL-like concepts of iterators had been fully</para>
        /// <para>developed.  An iterator approach is a better and more robust solution</para>
        /// <para>to iterating lists, both in terms of performance and encapsulation.</para>
        /// <para>Therefore, it is recommended to avoid operator[] and use the provided</para>
        /// <para>iterator classes in new code, and to upgrade existing code to the</para>
        /// <para>iterator idiom as practical.</para>
        /// </remarks>
        public unsafe partial class List<T> : IDisposable
        {
            public unsafe partial class Node : IDisposable
            {
                public __IntPtr __Instance { get; protected set; }

                internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.List<T>.Node> NativeToManagedMap =
                    new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.List<T>.Node>();

                internal static void __RecordNativeToManagedMapping(IntPtr native, global::gambit.Gambit.List<T>.Node managed)
                {
                    NativeToManagedMap[native] = managed;
                }

                internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::gambit.Gambit.List<T>.Node managed)
                {
    
                    return NativeToManagedMap.TryGetValue(native, out managed);
                }

                protected bool __ownsNativeInstance;

                internal static Node __CreateInstance(__IntPtr native, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    return new Node(native.ToPointer(), skipVTables);
                }

                internal static Node __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    if (__TryGetNativeToManagedMapping(native, out var managed))
                        return (Node)managed;
                    var result = __CreateInstance(native, skipVTables);
                    if (saveInstance)
                        __RecordNativeToManagedMapping(native, result);
                    return result;
                }

                protected Node(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new __IntPtr(native);
                }

                public void Dispose()
                {
                    Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
                }

                partial void DisposePartial(bool disposing);

                internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    NativeToManagedMap.TryRemove(__Instance, out _);
                    DisposePartial(disposing);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public T MData
                {
                    get
                    {
                        throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.Node maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                    }

                    set
                    {
                        throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.Node maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                    }
                }

                public global::gambit.Gambit.List<T>.Node MPrev
                {
                    get
                    {
                        throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.Node maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                    }

                    set
                    {
                        throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.Node maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                    }
                }

                public global::gambit.Gambit.List<T>.Node MNext
                {
                    get
                    {
                        throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.Node maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                    }

                    set
                    {
                        throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.Node maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                    }
                }
            }

            public unsafe partial class Iterator : IDisposable
            {
                public __IntPtr __Instance { get; protected set; }

                internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.List<T>.Iterator> NativeToManagedMap =
                    new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.List<T>.Iterator>();

                internal static void __RecordNativeToManagedMapping(IntPtr native, global::gambit.Gambit.List<T>.Iterator managed)
                {
                    NativeToManagedMap[native] = managed;
                }

                internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::gambit.Gambit.List<T>.Iterator managed)
                {
    
                    return NativeToManagedMap.TryGetValue(native, out managed);
                }

                protected bool __ownsNativeInstance;

                internal static Iterator __CreateInstance(__IntPtr native, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    return new Iterator(native.ToPointer(), skipVTables);
                }

                internal static Iterator __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    if (__TryGetNativeToManagedMapping(native, out var managed))
                        return (Iterator)managed;
                    var result = __CreateInstance(native, skipVTables);
                    if (saveInstance)
                        __RecordNativeToManagedMapping(native, result);
                    return result;
                }

                protected Iterator(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new __IntPtr(native);
                }

                public Iterator(global::gambit.Gambit.List<T> p_list, global::gambit.Gambit.List<T>.Node p_node)
                {
                    throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.Iterator maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                }

                public void Dispose()
                {
                    Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
                }

                partial void DisposePartial(bool disposing);

                internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    NativeToManagedMap.TryRemove(__Instance, out _);
                    DisposePartial(disposing);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public static global::gambit.Gambit.List<T>.Iterator operator ++(global::gambit.Gambit.List<T>.Iterator __op)
                {
                    throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.Iterator maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                }

                public static bool operator ==(global::gambit.Gambit.List<T>.Iterator __op, global::gambit.Gambit.List<T>.Iterator it)
                {
                    throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.Iterator maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                }

                public override bool Equals(object obj)
                {
                    return this == obj as global::gambit.Gambit.List<T>.Iterator;
                }

                public override int GetHashCode()
                {
                    throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.Iterator maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                }

                public static bool operator !=(global::gambit.Gambit.List<T>.Iterator __op, global::gambit.Gambit.List<T>.Iterator it)
                {
                    throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.Iterator maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                }
            }

            public unsafe partial class ConstIterator : IDisposable
            {
                public __IntPtr __Instance { get; protected set; }

                internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.List<T>.ConstIterator> NativeToManagedMap =
                    new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.List<T>.ConstIterator>();

                internal static void __RecordNativeToManagedMapping(IntPtr native, global::gambit.Gambit.List<T>.ConstIterator managed)
                {
                    NativeToManagedMap[native] = managed;
                }

                internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::gambit.Gambit.List<T>.ConstIterator managed)
                {
    
                    return NativeToManagedMap.TryGetValue(native, out managed);
                }

                protected bool __ownsNativeInstance;

                internal static ConstIterator __CreateInstance(__IntPtr native, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    return new ConstIterator(native.ToPointer(), skipVTables);
                }

                internal static ConstIterator __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    if (__TryGetNativeToManagedMapping(native, out var managed))
                        return (ConstIterator)managed;
                    var result = __CreateInstance(native, skipVTables);
                    if (saveInstance)
                        __RecordNativeToManagedMapping(native, result);
                    return result;
                }

                protected ConstIterator(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new __IntPtr(native);
                }

                public ConstIterator(global::gambit.Gambit.List<T> p_list, global::gambit.Gambit.List<T>.Node p_node)
                {
                    throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.ConstIterator maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                }

                public void Dispose()
                {
                    Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
                }

                partial void DisposePartial(bool disposing);

                internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    NativeToManagedMap.TryRemove(__Instance, out _);
                    DisposePartial(disposing);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public static global::gambit.Gambit.List<T>.ConstIterator operator ++(global::gambit.Gambit.List<T>.ConstIterator __op)
                {
                    throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.ConstIterator maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                }

                public static bool operator ==(global::gambit.Gambit.List<T>.ConstIterator __op, global::gambit.Gambit.List<T>.ConstIterator it)
                {
                    throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.ConstIterator maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                }

                public override bool Equals(object obj)
                {
                    return this == obj as global::gambit.Gambit.List<T>.ConstIterator;
                }

                public override int GetHashCode()
                {
                    throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.ConstIterator maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                }

                public static bool operator !=(global::gambit.Gambit.List<T>.ConstIterator __op, global::gambit.Gambit.List<T>.ConstIterator it)
                {
                    throw new ArgumentOutOfRangeException("", "", "global::gambit.Gambit.List<T>.ConstIterator maps a C++ template class and therefore it only supports a limited set of types and their subclasses: .");
                }
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.List<T>> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.List<T>>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::gambit.Gambit.List<T> managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::gambit.Gambit.List<T> managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static List<T> __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new List<T>(native.ToPointer(), skipVTables);
            }

            internal static List<T> __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (List<T>)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static List<T> __GetInstance(__IntPtr native)
            {
                if (!__TryGetNativeToManagedMapping(native, out var managed))
                    throw new global::System.Exception("No managed instance was found");
                var result = (List<T>)managed;
                if (result.__ownsNativeInstance)
                    result.SetupVTables();
                return result;
            }

            internal static List<T> __CreateInstance(global::gambit.Gambit.List.__Internal native, bool skipVTables = false)
            {
                return new List<T>(native, skipVTables);
            }

            private static void* __CopyValue(global::gambit.Gambit.List.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::gambit.Gambit.List.__Internal));
                *(global::gambit.Gambit.List.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private List(global::gambit.Gambit.List.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected List(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
                if (!skipVTables)
                    SetupVTables(true);
            }

            public List()
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                {
                    throw new MissingMethodException("Method List_T_ ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                }
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                {
                    throw new MissingMethodException("Method List_T_ ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
            }

            public List(global::gambit.Gambit.List<T> _0)
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                {
                    throw new MissingMethodException("Method List_T_ ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                }
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                {
                    throw new MissingMethodException("Method List_T_ ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static bool operator ==(global::gambit.Gambit.List<T> __op, global::gambit.Gambit.List<T> b)
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                {
                    throw new MissingMethodException("Method operator__ ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                }
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                {
                    throw new MissingMethodException("Method operator__ ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
            }

            public override bool Equals(object obj)
            {
                return this == obj as global::gambit.Gambit.List<T>;
            }

            public override int GetHashCode()
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                {
                    if (__Instance == __IntPtr.Zero)
                        return __IntPtr.Zero.GetHashCode();
                    return (*(global::gambit.Gambit.List.__Internal*) __Instance).GetHashCode();
                }
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                {
                    if (__Instance == __IntPtr.Zero)
                        return __IntPtr.Zero.GetHashCode();
                    return (*(global::gambit.Gambit.List.__Internal*) __Instance).GetHashCode();
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
            }

            public static bool operator !=(global::gambit.Gambit.List<T> __op, global::gambit.Gambit.List<T> b)
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                {
                    throw new MissingMethodException("Method operator__ ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                }
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                {
                    throw new MissingMethodException("Method operator__ ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
            }

            /// <summary>Return a forward iterator starting at the beginning of the list</summary>
            public global::gambit.Gambit.List<T>.Iterator Begin()
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                {
                    throw new MissingMethodException("Method Begin ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                }
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                {
                    throw new MissingMethodException("Method Begin ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
            }

            /// <summary>Return a forward iterator past the end of the list</summary>
            public global::gambit.Gambit.List<T>.Iterator End()
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                {
                    throw new MissingMethodException("Method End ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                }
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                {
                    throw new MissingMethodException("Method End ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
            }

            public static global::gambit.Gambit.List<T> operator +(global::gambit.Gambit.List<T> __op, global::gambit.Gambit.List<T> b)
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                {
                    throw new MissingMethodException("Method operator_ ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                }
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                {
                    throw new MissingMethodException("Method operator_ ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
            }

            public T Remove(int _0)
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                {
                    throw new MissingMethodException("Method Remove ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                }
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                {
                    throw new MissingMethodException("Method Remove ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
            }

            /// <summary>
            /// <para>Removes all elements from the list container (which are destroyed),</para>
            /// <para>leaving the container with a size of 0.</para>
            /// </summary>
            public void Clear()
            {
                var __T = typeof(T);
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                {
                    throw new MissingMethodException("Method Clear ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                }
                if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                {
                    throw new MissingMethodException("Method Clear ignored in specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
                throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
            }

            public T this[int _0]
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        throw new MissingMethodException("Method Item missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        throw new MissingMethodException("Method Item missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }

                set
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        throw new MissingMethodException("Method Item missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        throw new MissingMethodException("Method Item missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
            }

            protected int MLength
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        return ((global::gambit.Gambit.List.__Internal*)__Instance)->m_length;
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        return ((global::gambit.Gambit.List.__Internal*)__Instance)->m_length;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }

                set
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        ((global::gambit.Gambit.List.__Internal*)__Instance)->m_length = value;
                        return;
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        ((global::gambit.Gambit.List.__Internal*)__Instance)->m_length = value;
                        return;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
            }

            protected global::gambit.Gambit.List<T>.Node MHead
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        var __result0 = global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.Node.__GetOrCreateInstance(((global::gambit.Gambit.List.__Internal*)__Instance)->m_head, false);
                        return (global::gambit.Gambit.List<T>.Node) (object) __result0;
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        var __result0 = global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.Node.__GetOrCreateInstance(((global::gambit.Gambit.List.__Internal*)__Instance)->m_head, false);
                        return (global::gambit.Gambit.List<T>.Node) (object) __result0;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }

                set
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        ((global::gambit.Gambit.List.__Internal*)__Instance)->m_head = value is null ? __IntPtr.Zero : value.__Instance;
                        return;
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        ((global::gambit.Gambit.List.__Internal*)__Instance)->m_head = value is null ? __IntPtr.Zero : value.__Instance;
                        return;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
            }

            protected global::gambit.Gambit.List<T>.Node MTail
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        var __result0 = global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.Node.__GetOrCreateInstance(((global::gambit.Gambit.List.__Internal*)__Instance)->m_tail, false);
                        return (global::gambit.Gambit.List<T>.Node) (object) __result0;
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        var __result0 = global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.Node.__GetOrCreateInstance(((global::gambit.Gambit.List.__Internal*)__Instance)->m_tail, false);
                        return (global::gambit.Gambit.List<T>.Node) (object) __result0;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }

                set
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        ((global::gambit.Gambit.List.__Internal*)__Instance)->m_tail = value is null ? __IntPtr.Zero : value.__Instance;
                        return;
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        ((global::gambit.Gambit.List.__Internal*)__Instance)->m_tail = value is null ? __IntPtr.Zero : value.__Instance;
                        return;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
            }

            protected int MCurrentIndex
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        return ((global::gambit.Gambit.List.__Internal*)__Instance)->m_currentIndex;
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        return ((global::gambit.Gambit.List.__Internal*)__Instance)->m_currentIndex;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }

                set
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        ((global::gambit.Gambit.List.__Internal*)__Instance)->m_currentIndex = value;
                        return;
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        ((global::gambit.Gambit.List.__Internal*)__Instance)->m_currentIndex = value;
                        return;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
            }

            protected global::gambit.Gambit.List<T>.Node MCurrentNode
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        var __result0 = global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.Node.__GetOrCreateInstance(((global::gambit.Gambit.List.__Internal*)__Instance)->m_currentNode, false);
                        return (global::gambit.Gambit.List<T>.Node) (object) __result0;
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        var __result0 = global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.Node.__GetOrCreateInstance(((global::gambit.Gambit.List.__Internal*)__Instance)->m_currentNode, false);
                        return (global::gambit.Gambit.List<T>.Node) (object) __result0;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }

                set
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        ((global::gambit.Gambit.List.__Internal*)__Instance)->m_currentNode = value is null ? __IntPtr.Zero : value.__Instance;
                        return;
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        ((global::gambit.Gambit.List.__Internal*)__Instance)->m_currentNode = value is null ? __IntPtr.Zero : value.__Instance;
                        return;
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
            }

            /// <summary>Return a const forward iterator starting at the beginning of the list</summary>
            public global::gambit.Gambit.List<T>.ConstIterator Cbegin
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        throw new MissingMethodException("Method Cbegin missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        throw new MissingMethodException("Method Cbegin missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
            }

            /// <summary>Return a const forward iterator past the end of the list</summary>
            public global::gambit.Gambit.List<T>.ConstIterator Cend
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        throw new MissingMethodException("Method Cend missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        throw new MissingMethodException("Method Cend missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
            }

            public int Length
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        throw new MissingMethodException("Method Length missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        throw new MissingMethodException("Method Length missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
            }

            /// <summary>
            /// <para>These operations are a partial implementation of operations on</para>
            /// <para>STL-style list containers.  It is suggested that future code be</para>
            /// <para>written to use these, and existing code ported to use them as</para>
            /// <para>possible.</para>
            /// <para>@{</para>
            /// <para>Return whether the list container is empty (has size 0).</para>
            /// </summary>
            public bool Empty
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        throw new MissingMethodException("Method Empty missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        throw new MissingMethodException("Method Empty missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
            }

            /// <summary>Return the number of elements in the list container.</summary>
            public ulong Size
            {
                get
                {
                    var __T = typeof(T);
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>)))
                    {
                        throw new MissingMethodException("Method Size missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>.");
                    }
                    if (__T.IsAssignableFrom(typeof(global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>)))
                    {
                        throw new MissingMethodException("Method Size missing from explicit specialization global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                    }
                    throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::gambit.Gambit.List<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>>, <global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>>.");
                }
            }

            #region Virtual table interop

            // List<T>::~List()
            private static global::gambit.Delegates.Action___IntPtr_int _dtorDelegateInstance;

            private static void _dtorDelegateHook(__IntPtr __instance, int delete)
            {
                var __target = global::gambit.Gambit.List<T>.__GetInstance(__instance);
                __target.Dispose(disposing: true, callNativeDtor: true);
            }

            internal static class VTableLoader
            {
                private static volatile bool initialized;
                private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
                private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
                private static readonly IntPtr[] Thunks = new IntPtr[1];
                private static CppSharp.Runtime.VTables VTables;
                private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                    SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
                static VTableLoader()
                {
                    _dtorDelegateInstance += _dtorDelegateHook;
                    Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                }

                public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
                {
                    if (!initialized)
                    {
                        lock (ManagedVTables)
                        {
                            if (!initialized)
                            {
                                initialized = true;
                                VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                                VTables.Methods = new Delegate[1][];
                                ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                                ManagedVTablesDtorOnly[0][0] = Thunks[0];
                                ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                                ManagedVTables[0][0] = Thunks[0];
                                VTables.Methods[0] = new Delegate[1];
                            }
                        }
                    }

                    if (destructorOnly)
                    {
                        *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                    }
                    else
                    {
                        *(IntPtr**)(instance + 0) = ManagedVTables[0];
                    }
                    return VTables;
                }
            }

            protected CppSharp.Runtime.VTables __vtables;
            internal virtual CppSharp.Runtime.VTables __VTables
            {
                get {
                    if (__vtables.IsEmpty)
                        __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                    return __vtables;
                }

                set {
                    __vtables = value;
                }
            }
            internal virtual void SetupVTables(bool destructorOnly = false)
            {
                if (__VTables.IsTransient)
                    __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
            }
            #endregion
        }

        public unsafe static partial class ListExtensions
        {
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "?front@?$List@V?$GameObjectPtr@VGameStrategyRep@Gambit@@@Gambit@@@Gambit@@QEAAAEAV?$GameObjectPtr@VGameStrategyRep@Gambit@@@2@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr Front(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "?back@?$List@V?$GameObjectPtr@VGameStrategyRep@Gambit@@@Gambit@@@Gambit@@QEAAAEAV?$GameObjectPtr@VGameStrategyRep@Gambit@@@2@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr Back(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "?front@?$List@V?$GameObjectPtr@VGameInfosetRep@Gambit@@@Gambit@@@Gambit@@QEAAAEAV?$GameObjectPtr@VGameInfosetRep@Gambit@@@2@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr Front_1(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "?back@?$List@V?$GameObjectPtr@VGameInfosetRep@Gambit@@@Gambit@@@Gambit@@QEAAAEAV?$GameObjectPtr@VGameInfosetRep@Gambit@@@2@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr Back_1(__IntPtr __instance);
            }

            /// <summary>Returns a reference to the first elemnet in the list container.</summary>
            public static global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep> Front(this global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>> @this)
            {
                var __arg0 = @this is null ? __IntPtr.Zero : @this.__Instance;
                var ___ret = __Internal.Front(__arg0);
                var __result0 = global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>.__GetOrCreateInstance(___ret, false);
                return __result0;
            }

            /// <summary>Returns a reference to the last element in the list container.</summary>
            public static global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep> Back(this global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>> @this)
            {
                var __arg0 = @this is null ? __IntPtr.Zero : @this.__Instance;
                var ___ret = __Internal.Back(__arg0);
                var __result0 = global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameStrategyRep>.__GetOrCreateInstance(___ret, false);
                return __result0;
            }

            /// <summary>Returns a reference to the first elemnet in the list container.</summary>
            public static global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep> Front(this global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>> @this)
            {
                var __arg0 = @this is null ? __IntPtr.Zero : @this.__Instance;
                var ___ret = __Internal.Front_1(__arg0);
                var __result0 = global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>.__GetOrCreateInstance(___ret, false);
                return __result0;
            }

            /// <summary>Returns a reference to the last element in the list container.</summary>
            public static global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep> Back(this global::gambit.Gambit.List<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>> @this)
            {
                var __arg0 = @this is null ? __IntPtr.Zero : @this.__Instance;
                var ___ret = __Internal.Back_1(__arg0);
                var __result0 = global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameInfosetRep>.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }
    }
}
