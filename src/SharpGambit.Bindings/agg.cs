// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace gambit
{
    namespace Gambit
    {
        namespace Gametracer
        {
            public unsafe partial class Aggame
            {
                public partial struct __Internal
                {
                }

                public __IntPtr __Instance { get; protected set; }

                internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.Gametracer.Aggame> NativeToManagedMap =
                    new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.Gametracer.Aggame>();

                internal static void __RecordNativeToManagedMapping(IntPtr native, global::gambit.Gambit.Gametracer.Aggame managed)
                {
                    NativeToManagedMap[native] = managed;
                }

                internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::gambit.Gambit.Gametracer.Aggame managed)
                {
    
                    return NativeToManagedMap.TryGetValue(native, out managed);
                }

                protected bool __ownsNativeInstance;

                internal static Aggame __CreateInstance(__IntPtr native, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    return new Aggame(native.ToPointer(), skipVTables);
                }

                internal static Aggame __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    if (__TryGetNativeToManagedMapping(native, out var managed))
                        return (Aggame)managed;
                    var result = __CreateInstance(native, skipVTables);
                    if (saveInstance)
                        __RecordNativeToManagedMapping(native, result);
                    return result;
                }

                internal static Aggame __CreateInstance(__Internal native, bool skipVTables = false)
                {
                    return new Aggame(native, skipVTables);
                }

                private static void* __CopyValue(__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                    *(__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Aggame(__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    __RecordNativeToManagedMapping(__Instance, this);
                }

                protected Aggame(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new __IntPtr(native);
                }
            }
        }

        namespace Agg
        {
            public enum Payofftype
            {
                COMPLETE = 0,
                MAPPING = 1,
                ADDITIVE = 2
            }

            public unsafe partial class AGG : IDisposable
            {
                [StructLayout(LayoutKind.Sequential, Size = 528)]
                public partial struct __Internal
                {
                    internal int numPlayers;
                    internal global::Std.Vector.__Internalc__N_std_S_vector__I___N_std_S_allocator__I actions;
                    internal global::Std.Vector.__Internalc__N_std_S_vector__I___N_std_S_allocator__I strategyOffset;
                    internal int totalActions;
                    internal int maxActions;
                    internal int numActionNodes;
                    internal int numPNodes;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector__I___N_std_S_allocator__I___N_std_S_allocator__S0_ actionSets;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector__I___N_std_S_allocator__I___N_std_S_allocator__S0_ neighbors;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_shared_ptr____N_Gambit_N_agg_S_proj_func___N_std_S_allocator__S0_ projectionTypes;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_Gambit_N_agg_S_trie_map__d___N_std_S_allocator__S0_ payoffs;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector____N_std_S_vector____N_std_S_vector__I___N_std_S_allocator__I___N_std_S_allocator__S2____N_std_S_allocator__S1____N_std_S_allocator__S0_ projection;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector____N_Gambit_N_agg_S_trie_map__d___N_std_S_allocator__S1____N_std_S_allocator__S0_ projectedStrat;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector____N_Gambit_N_agg_S_trie_map__d___N_std_S_allocator__S1____N_std_S_allocator__S0_ fullProjectedStrat;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector____N_std_S_shared_ptr____N_Gambit_N_agg_S_proj_func___N_std_S_allocator__S1____N_std_S_allocator__S0_ projFunctions;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector____N_std_S_vector__I___N_std_S_allocator__I___N_std_S_allocator__S1____N_std_S_allocator__S0_ Porder;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_Gambit_N_agg_S_trie_map__d___N_std_S_allocator__S0_ Pr;
                    internal global::Std.Vector.__Internalc__N_std_S_vector__b___N_std_S_allocator__b isPure;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector__I___N_std_S_allocator__I___N_std_S_allocator__S0_ node2Action;
                    internal global::gambit.Gambit.Agg.TrieMap.__Internalc__N_Gambit_N_agg_S_trie_map__d cache;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector__I___N_std_S_allocator__I___N_std_S_allocator__S0_ uniqueActionSets;
                    internal global::Std.Vector.__Internalc__N_std_S_vector____N_std_S_vector__I___N_std_S_allocator__I___N_std_S_allocator__S0_ playerClasses;
                    internal global::Std.Vector.__Internalc__N_std_S_vector__I___N_std_S_allocator__I player2Class;
                    internal int numKSymActions;
                    internal global::Std.Vector.__Internalc__N_std_S_vector__I___N_std_S_allocator__I kSymStrategyOffset;

                    [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "??1AGG@agg@Gambit@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
                    internal static extern void dtor(__IntPtr __instance);
                }

                public __IntPtr __Instance { get; protected set; }

                internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.Agg.AGG> NativeToManagedMap =
                    new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.Agg.AGG>();

                internal static void __RecordNativeToManagedMapping(IntPtr native, global::gambit.Gambit.Agg.AGG managed)
                {
                    NativeToManagedMap[native] = managed;
                }

                internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::gambit.Gambit.Agg.AGG managed)
                {
    
                    return NativeToManagedMap.TryGetValue(native, out managed);
                }

                protected bool __ownsNativeInstance;

                internal static AGG __CreateInstance(__IntPtr native, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    return new AGG(native.ToPointer(), skipVTables);
                }

                internal static AGG __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
                {
                    if (native == __IntPtr.Zero)
                        return null;
                    if (__TryGetNativeToManagedMapping(native, out var managed))
                        return (AGG)managed;
                    var result = __CreateInstance(native, skipVTables);
                    if (saveInstance)
                        __RecordNativeToManagedMapping(native, result);
                    return result;
                }

                internal static AGG __CreateInstance(__Internal native, bool skipVTables = false)
                {
                    return new AGG(native, skipVTables);
                }

                private static void* __CopyValue(__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                    *(__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private AGG(__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    __RecordNativeToManagedMapping(__Instance, this);
                }

                protected AGG(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new __IntPtr(native);
                }

                public void Dispose()
                {
                    Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
                }

                partial void DisposePartial(bool disposing);

                internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    NativeToManagedMap.TryRemove(__Instance, out _);
                    DisposePartial(disposing);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public const char COMMENT_CHAR = '#';
                public const char LBRACKET = '[';
                public const char RBRACKET = ']';            }
        }
    }
}
