// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace gambit
{
    public unsafe partial class game
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "NewNormalFormGame", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr NewNormalFormGame([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string title, int pc, [MarshalAs(UnmanagedType.LPArray)] string[] players, int[] strategies);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "NewExtensiveFormGame", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr NewExtensiveFormGame();

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "SetTitle", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr SetTitle([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string title, __IntPtr game);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetTitle", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetTitle(__IntPtr game);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "NewPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr NewPlayer(__IntPtr game);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetPlayer(__IntPtr game, int pi);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetPlayers", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long* GetPlayers(__IntPtr game, int* size);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "NumPlayers", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int NumPlayers(__IntPtr game);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "StrategyCounts", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int* StrategyCounts(__IntPtr game);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "NewOutcome", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr NewOutcome(__IntPtr game);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetOutcome", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetOutcome(__IntPtr game, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "NewTablePureStrategyProfile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr NewTablePureStrategyProfile(__IntPtr game);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetLatex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetLatex(__IntPtr game);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetHtml", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetHtml(__IntPtr game);
        }

        public static __IntPtr NewNormalFormGame(string title, int pc, string[] players, int[] strategies)
        {
            var ___ret = __Internal.NewNormalFormGame(title, pc, players, strategies);
            return ___ret;
        }

        public static __IntPtr NewExtensiveFormGame()
        {
            var ___ret = __Internal.NewExtensiveFormGame();
            return ___ret;
        }

        public static __IntPtr SetTitle(string title, __IntPtr game)
        {
            var ___ret = __Internal.SetTitle(title, game);
            return ___ret;
        }

        public static string GetTitle(__IntPtr game)
        {
            var ___ret = __Internal.GetTitle(game);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static __IntPtr NewPlayer(__IntPtr game)
        {
            var ___ret = __Internal.NewPlayer(game);
            return ___ret;
        }

        public static __IntPtr GetPlayer(__IntPtr game, int pi)
        {
            var ___ret = __Internal.GetPlayer(game, pi);
            return ___ret;
        }

        public static long* GetPlayers(__IntPtr game, out int size)
        {
            fixed (int* __size1 = &size)
            {
                var __arg1 = __size1;
                var ___ret = __Internal.GetPlayers(game, __arg1);
                return ___ret;
            }
        }

        public static int NumPlayers(__IntPtr game)
        {
            var ___ret = __Internal.NumPlayers(game);
            return ___ret;
        }

        public static int* StrategyCounts(__IntPtr game)
        {
            var ___ret = __Internal.StrategyCounts(game);
            return ___ret;
        }

        public static __IntPtr NewOutcome(__IntPtr game)
        {
            var ___ret = __Internal.NewOutcome(game);
            return ___ret;
        }

        public static __IntPtr GetOutcome(__IntPtr game, int index)
        {
            var ___ret = __Internal.GetOutcome(game, index);
            return ___ret;
        }

        public static __IntPtr NewTablePureStrategyProfile(__IntPtr game)
        {
            var ___ret = __Internal.NewTablePureStrategyProfile(game);
            return ___ret;
        }

        public static string GetLatex(__IntPtr game)
        {
            var ___ret = __Internal.GetLatex(game);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static string GetHtml(__IntPtr game)
        {
            var ___ret = __Internal.GetHtml(game);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }
    }

    public unsafe partial class player
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetPlayerLabel", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetPlayerLabel(__IntPtr player);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "SetPlayerLabel", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr SetPlayerLabel(__IntPtr player, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetPlayerNumber", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPlayerNumber(__IntPtr player);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "NewPlayerStrategy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr NewPlayerStrategy(__IntPtr player);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetPlayerNumStrategies", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPlayerNumStrategies(__IntPtr player);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetPlayerStrategy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetPlayerStrategy(__IntPtr player, int st);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetPlayerStrategies", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long* GetPlayerStrategies(__IntPtr player, int* size);
        }

        public static string GetPlayerLabel(__IntPtr player)
        {
            var ___ret = __Internal.GetPlayerLabel(player);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static __IntPtr SetPlayerLabel(__IntPtr player, string label)
        {
            var ___ret = __Internal.SetPlayerLabel(player, label);
            return ___ret;
        }

        public static int GetPlayerNumber(__IntPtr player)
        {
            var ___ret = __Internal.GetPlayerNumber(player);
            return ___ret;
        }

        public static __IntPtr NewPlayerStrategy(__IntPtr player)
        {
            var ___ret = __Internal.NewPlayerStrategy(player);
            return ___ret;
        }

        public static int GetPlayerNumStrategies(__IntPtr player)
        {
            var ___ret = __Internal.GetPlayerNumStrategies(player);
            return ___ret;
        }

        public static __IntPtr GetPlayerStrategy(__IntPtr player, int st)
        {
            var ___ret = __Internal.GetPlayerStrategy(player, st);
            return ___ret;
        }

        public static long* GetPlayerStrategies(__IntPtr player, ref int size)
        {
            fixed (int* __size1 = &size)
            {
                var __arg1 = __size1;
                var ___ret = __Internal.GetPlayerStrategies(player, __arg1);
                return ___ret;
            }
        }
    }

    public unsafe partial class strategy
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetStrategyLabel", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetStrategyLabel(__IntPtr strategy);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "SetStrategyLabel", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr SetStrategyLabel(__IntPtr strategy, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetStrategyIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetStrategyIndex(__IntPtr strategy);
        }

        public static string GetStrategyLabel(__IntPtr strategy)
        {
            var ___ret = __Internal.GetStrategyLabel(strategy);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static __IntPtr SetStrategyLabel(__IntPtr strategy, string label)
        {
            var ___ret = __Internal.SetStrategyLabel(strategy, label);
            return ___ret;
        }

        public static int GetStrategyIndex(__IntPtr strategy)
        {
            var ___ret = __Internal.GetStrategyIndex(strategy);
            return ___ret;
        }
    }

    public unsafe partial class outcome
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetOutcomeIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetOutcomeIndex(__IntPtr outcome);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "GetPayoff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetPayoff(__IntPtr outcome, int pl, int* num, int* den);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "SetRationalPayoff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr SetRationalPayoff(__IntPtr outcome, int pl, int num, int den);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "SetIntegerPayoff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr SetIntegerPayoff(__IntPtr outcome, int pl, int payoff);
        }

        public static int GetOutcomeIndex(__IntPtr outcome)
        {
            var ___ret = __Internal.GetOutcomeIndex(outcome);
            return ___ret;
        }

        public static void GetPayoff(__IntPtr outcome, int pl, out int num, out int den)
        {
            fixed (int* __num2 = &num)
            {
                var __arg2 = __num2;
                fixed (int* __den3 = &den)
                {
                    var __arg3 = __den3;
                    __Internal.GetPayoff(outcome, pl, __arg2, __arg3);
                }
            }
        }

        public static __IntPtr SetRationalPayoff(__IntPtr outcome, int pl, int num, int den)
        {
            var ___ret = __Internal.SetRationalPayoff(outcome, pl, num, den);
            return ___ret;
        }

        public static __IntPtr SetIntegerPayoff(__IntPtr outcome, int pl, int payoff)
        {
            var ___ret = __Internal.SetIntegerPayoff(outcome, pl, payoff);
            return ___ret;
        }
    }

    public unsafe partial class strategyprofile
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "PSP_New", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr PSP_New(__IntPtr game);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "PSP_GetIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PSP_GetIndex(__IntPtr profile);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "PSP_GetStrategy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr PSP_GetStrategy(__IntPtr profile, int pl);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "PSP_SetStrategy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr PSP_SetStrategy(__IntPtr profile, __IntPtr s);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "PSP_GetOutcome", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr PSP_GetOutcome(__IntPtr profile);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "PSP_SetOutcome", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr PSP_SetOutcome(__IntPtr profile, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Double_New", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr MSP_DoubleNew(__IntPtr game);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Double_GetStrategyProbability", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double MSP_DoubleGetStrategyProbability(__IntPtr profile, __IntPtr s);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Double_SetStrategyProbability", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr MSP_DoubleSetStrategyProbability(__IntPtr profile, __IntPtr s, double p);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Double_GetPlayerPayoff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double MSP_DoubleGetPlayerPayoff(__IntPtr profile, __IntPtr player);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Double_GetStrategyPayoff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double MSP_DoubleGetStrategyPayoff(__IntPtr profile, __IntPtr strategy);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Double_GetPlayerNumPayoff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double MSP_DoubleGetPlayerNumPayoff(__IntPtr profile, int player);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Rational_New", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr MSP_RationalNew(__IntPtr game);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Rational_GetStrategyProbability", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double MSP_RationalGetStrategyProbability(__IntPtr profile, __IntPtr s);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Rational_GetStrategyProbabilityRational", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MSP_RationalGetStrategyProbabilityRational(__IntPtr profile, __IntPtr s, int* num, int* den);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Rational_SetStrategyProbability", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr MSP_RationalSetStrategyProbability(__IntPtr profile, __IntPtr s, double p);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Rational_GetPlayerPayoff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double MSP_RationalGetPlayerPayoff(__IntPtr profile, __IntPtr player);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Rational_GetStrategyPayoff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double MSP_RationalGetStrategyPayoff(__IntPtr profile, __IntPtr strategy);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "MSP_Rational_GetPlayerNumPayoff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double MSP_RationalGetPlayerNumPayoff(__IntPtr profile, int player);
        }

        public static __IntPtr PSP_New(__IntPtr game)
        {
            var ___ret = __Internal.PSP_New(game);
            return ___ret;
        }

        public static int PSP_GetIndex(__IntPtr profile)
        {
            var ___ret = __Internal.PSP_GetIndex(profile);
            return ___ret;
        }

        public static __IntPtr PSP_GetStrategy(__IntPtr profile, int pl)
        {
            var ___ret = __Internal.PSP_GetStrategy(profile, pl);
            return ___ret;
        }

        public static __IntPtr PSP_SetStrategy(__IntPtr profile, __IntPtr s)
        {
            var ___ret = __Internal.PSP_SetStrategy(profile, s);
            return ___ret;
        }

        public static __IntPtr PSP_GetOutcome(__IntPtr profile)
        {
            var ___ret = __Internal.PSP_GetOutcome(profile);
            return ___ret;
        }

        public static __IntPtr PSP_SetOutcome(__IntPtr profile, __IntPtr o)
        {
            var ___ret = __Internal.PSP_SetOutcome(profile, o);
            return ___ret;
        }

        public static __IntPtr MSP_DoubleNew(__IntPtr game)
        {
            var ___ret = __Internal.MSP_DoubleNew(game);
            return ___ret;
        }

        public static double MSP_DoubleGetStrategyProbability(__IntPtr profile, __IntPtr s)
        {
            var ___ret = __Internal.MSP_DoubleGetStrategyProbability(profile, s);
            return ___ret;
        }

        public static __IntPtr MSP_DoubleSetStrategyProbability(__IntPtr profile, __IntPtr s, double p)
        {
            var ___ret = __Internal.MSP_DoubleSetStrategyProbability(profile, s, p);
            return ___ret;
        }

        public static double MSP_DoubleGetPlayerPayoff(__IntPtr profile, __IntPtr player)
        {
            var ___ret = __Internal.MSP_DoubleGetPlayerPayoff(profile, player);
            return ___ret;
        }

        public static double MSP_DoubleGetStrategyPayoff(__IntPtr profile, __IntPtr strategy)
        {
            var ___ret = __Internal.MSP_DoubleGetStrategyPayoff(profile, strategy);
            return ___ret;
        }

        public static double MSP_DoubleGetPlayerNumPayoff(__IntPtr profile, int player)
        {
            var ___ret = __Internal.MSP_DoubleGetPlayerNumPayoff(profile, player);
            return ___ret;
        }

        public static __IntPtr MSP_RationalNew(__IntPtr game)
        {
            var ___ret = __Internal.MSP_RationalNew(game);
            return ___ret;
        }

        public static double MSP_RationalGetStrategyProbability(__IntPtr profile, __IntPtr s)
        {
            var ___ret = __Internal.MSP_RationalGetStrategyProbability(profile, s);
            return ___ret;
        }

        public static void MSP_RationalGetStrategyProbabilityRational(__IntPtr profile, __IntPtr s, out int num, out int den)
        {
            fixed (int* __num2 = &num)
            {
                var __arg2 = __num2;
                fixed (int* __den3 = &den)
                {
                    var __arg3 = __den3;
                    __Internal.MSP_RationalGetStrategyProbabilityRational(profile, s, __arg2, __arg3);
                }
            }
        }

        public static __IntPtr MSP_RationalSetStrategyProbability(__IntPtr profile, __IntPtr s, double p)
        {
            var ___ret = __Internal.MSP_RationalSetStrategyProbability(profile, s, p);
            return ___ret;
        }

        public static double MSP_RationalGetPlayerPayoff(__IntPtr profile, __IntPtr player)
        {
            var ___ret = __Internal.MSP_RationalGetPlayerPayoff(profile, player);
            return ___ret;
        }

        public static double MSP_RationalGetStrategyPayoff(__IntPtr profile, __IntPtr strategy)
        {
            var ___ret = __Internal.MSP_RationalGetStrategyPayoff(profile, strategy);
            return ___ret;
        }

        public static double MSP_RationalGetPlayerNumPayoff(__IntPtr profile, int player)
        {
            var ___ret = __Internal.MSP_RationalGetPlayerNumPayoff(profile, player);
            return ___ret;
        }
    }

    public unsafe partial class solvers
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "EnumPureStrategy_Solve", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long* EnumPureStrategySolve(__IntPtr game, int* size);

            [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "EnumMixedStrategy_Solve", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long* EnumMixedStrategySolve(__IntPtr game, int* size);
        }

        public static long* EnumPureStrategySolve(__IntPtr game, out int size)
        {
            fixed (int* __size1 = &size)
            {
                var __arg1 = __size1;
                var ___ret = __Internal.EnumPureStrategySolve(game, __arg1);
                return ___ret;
            }
        }

        public static long* EnumMixedStrategySolve(__IntPtr game, out int size)
        {
            fixed (int* __size1 = &size)
            {
                var __arg1 = __size1;
                var ___ret = __Internal.EnumMixedStrategySolve(game, __arg1);
                return ___ret;
            }
        }
    }
}
