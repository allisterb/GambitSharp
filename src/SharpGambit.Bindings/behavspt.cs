// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace gambit
{
    namespace Gambit
    {
        /// <summary>
        /// <para>This class represents a subset of the actions in an extensive game.</para>
        /// <para>It is enforced that each player has at least one action at each</para>
        /// <para>information set; thus, the actions in a support can be viewed as</para>
        /// <para>a restriction of a game to a subset of its actions.  This is useful</para>
        /// <para>for eliminating dominated strategies from consideration, and in</para>
        /// <para>computational approaches that enumerate possible equilibrium</para>
        /// <para>supports.</para>
        /// </summary>
        public unsafe partial class BehaviorSupportProfile : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 64)]
            public partial struct __Internal
            {
                internal global::gambit.Gambit.GameObjectPtr.__Internal m_efg;
                internal global::gambit.Gambit.Array.__Internal m_actions;
                internal global::Std.Map.__Internalc__N_std_S_map____N_Gambit_S_GameObjectPtr____N_Gambit_S_GameInfosetRep_b___N_std_S_less__S0____N_std_S_allocator____N_std_S_pair__1S0__b m_infosetReachable;
                internal global::Std.Map.__Internalc__N_std_S_map____N_Gambit_S_GameObjectPtr____N_Gambit_S_GameNodeRep_b___N_std_S_less__S0____N_std_S_allocator____N_std_S_pair__1S0__b m_nonterminalReachable;

                [SuppressUnmanagedCodeSecurity, DllImport("sharpgambit", EntryPoint = "??1BehaviorSupportProfile@Gambit@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void dtor(__IntPtr __instance);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.BehaviorSupportProfile> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::gambit.Gambit.BehaviorSupportProfile>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::gambit.Gambit.BehaviorSupportProfile managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::gambit.Gambit.BehaviorSupportProfile managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static BehaviorSupportProfile __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new BehaviorSupportProfile(native.ToPointer(), skipVTables);
            }

            internal static BehaviorSupportProfile __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (BehaviorSupportProfile)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static BehaviorSupportProfile __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new BehaviorSupportProfile(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private BehaviorSupportProfile(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected BehaviorSupportProfile(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            protected global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameRep> MEfg
            {
                get
                {
                    return global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameRep>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_efg));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((__Internal*)__Instance)->m_efg = *(global::gambit.Gambit.GameObjectPtr.__Internal*) value.__Instance;
                }
            }

            protected global::gambit.Gambit.Array<global::gambit.Gambit.Array<global::gambit.Gambit.Array<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameActionRep>>>> MActions
            {
                get
                {
                    return global::gambit.Gambit.Array<global::gambit.Gambit.Array<global::gambit.Gambit.Array<global::gambit.Gambit.GameObjectPtr<global::gambit.Gambit.GameActionRep>>>>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_actions));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((__Internal*)__Instance)->m_actions = *(global::gambit.Gambit.Array.__Internal*) value.__Instance;
                }
            }
        }
    }
}
